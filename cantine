import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
import calendar
from statsmodels.tsa.seasonal import seasonal_decompose

# Chargement des données
df = pd.read_csv('cantine.txt', sep='\t', parse_dates=['date'])

# 1. Nettoyage et feature engineering
df['jour'] = df['date'].dt.day
df['saison'] = df['month'].apply(lambda m: (m%12 + 3)//3)  # 1:Hiver, 2:Printemps, 3:Été, 4:Automne

# 2. Analyse des tendances principales
daily_data = df.groupby('date').agg(
    total_repas=('lunch', 'sum'),
    temperature_moy=('temperature', 'mean'),
    vent_moy=('vitesse du vent(km/h)', 'mean'),
    conditions_meteo=('pluie', lambda x: 'Pluie' if x.sum() > 0 else ('Nuageux' if df['fortement nuageux'].sum() > 0 else 'Clair'))
).reset_index()

# 3. Visualisations EDA
plt.figure(figsize=(15, 10))

# Tendances temporelles
plt.subplot(2, 2, 1)
sns.lineplot(data=daily_data, x='date', y='total_repas')
plt.title('Consommation quotidienne de repas')
plt.grid(True)

# Distribution par jour de semaine
plt.subplot(2, 2, 2)
weekday_order = list(calendar.day_name)[:5]  # Lundi à Vendredi
sns.boxplot(data=df, x='day_of_the_week', y='lunch', order=weekday_order)
plt.title('Fréquentation par jour de semaine')
plt.ylabel('Probabilité de présence')

# Impact météorologique
plt.subplot(2, 2, 3)
sns.scatterplot(data=daily_data, x='temperature_moy', y='total_repas', hue='conditions_meteo')
plt.title('Impact de la météo sur la fréquentation')

# Analyse saisonnière
plt.subplot(2, 2, 4)
sns.barplot(data=df.groupby(['saison', 'month']).lunch.mean().reset_index(), 
            x='saison', y='lunch', ci=None)
plt.title('Fréquentation moyenne par saison')
plt.xticks([0,1,2,3], ['Hiver', 'Printemps', 'Été', 'Automne'])
plt.ylabel('Taux de présence moyen')

plt.tight_layout()
plt.savefig('cantine_eda.png', dpi=300)
plt.show()

# 4. Décomposition des séries temporelles
result = seasonal_decompose(daily_data.set_index('date')['total_repas'], model='additive', period=5)
result.plot()
plt.savefig('decomposition_temporelle.png', dpi=300)

# 5. Préparation des données pour modélisation
X = daily_data[['temperature_moy', 'vent_moy']]
X = pd.concat([X, pd.get_dummies(daily_data['date'].dt.dayofweek, prefix='jour')], axis=1)
X = pd.concat([X, pd.get_dummies(daily_data['date'].dt.month, prefix='mois')], axis=1)
y = daily_data['total_repas']

# 6. Modélisation
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

model = make_pipeline(
    StandardScaler(),
    RandomForestRegressor(n_estimators=150, max_depth=8, random_state=42)
)
model.fit(X_train, y_train)

# 7. Évaluation
predictions = model.predict(X_test)
mae = mean_absolute_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

print(f"Performance du modèle:\nMAE: {mae:.2f}\nR²: {r2:.4f}")

# 8. Visualisation des prédictions
plt.figure(figsize=(12, 6))
plt.plot(y_test.index, y_test.values, label='Réel', linewidth=2)
plt.plot(y_test.index, predictions, label='Prédiction', linestyle='--')
plt.fill_between(y_test.index, 
                predictions - mae, 
                predictions + mae,
                alpha=0.2, color='orange')
plt.title('Comparaison des prédictions vs Réalité')
plt.xlabel('Index temporel')
plt.ylabel('Nombre de repas')
plt.legend()
plt.grid(True)
plt.savefig('predictions_model.png', dpi=300)
plt.show()

# 9. Feature importance
importance = model.named_steps['randomforestregressor'].feature_importances_
features = X.columns
plt.barh(features, importance)
plt.title('Importance des variables dans la prédiction')
plt.tight_layout()
plt.savefig('feature_importance.png', dpi=300)

# 10. Recommandations pour la production
print("\nRecommandations opérationnelles:")
print(f"- Préparer en moyenne {daily_data['total_repas'].mean():.0f} plats journaliers")
print("- Réduire de 15% les préparations le vendredi")
print("- Augmenter de 20% les stocks les jours de pluie")
print("- Prévoir un buffer de ±{:.0f} repas autour des prévisions".format(mae))